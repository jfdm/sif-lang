sif solution

Description """ Provides an interface for creating families of related
or dependent data structures without specifying their concrete
implementations."""

> Extension of the OO Factory Solution to provide for product families
> to be constructed.
>
>
> OO Factories detail how a single product is created, and how OO
> paradigms provide for a generic construction mechanism to be
> provided for products. 'Abstract OO Factories' extends the OO
> Factories solution by facilitating the create of product families,
> multiple products from the same abstraction point.

Solution "Abstract OO Factories" solves adt in std {

   > Utilisation of a generic construction mechanism that contains
   > the implementation/manipulate details common for all products,
   > aside from the actual construction mechanism.  Concrete
   > mechanisms will extend the generic mechanism to perform
   > construction of the products. It is these concrete mechanisms
   > that are responsible for creating one or more concrete products,
   > and is the only mechanism with knowledge of this creation.

   Property "Creators with Interfaces" {

    Advantage "Generic Creators" is Satisfied {
      Affects {
  	    Helps agnosticObjectGeneration,
  		Helps separateObjects,
  		Helps closedForModification,
  		Helps flexibleReplacement
     }
	}
  }

  > Provision of a generic interface which all product implementations
  > must satisfy.  This allows for products to be used agnostic to their
  > implementation.

  Property "Products with an Interface" {

    > Facilitates the actual separation of product implementation and creation
    Advantage "Using Product Interfaces" is Satisfied {

	  Affects {
	    Helps separateObjects,
		Helps closedForModification,
		Helps flexibleReplacement,
		Helps separateObjects,
		Hurts minimalDependancies
      }
    }

	> Multiple product families is great but this increases the code dependencies.
	Advantage "Product Families" is Satisfied {
	  Affects {
	    Helps separateObjects,
		Helps closedForModification,
		Helps flexibleReplacement,
		Helps separateObjects,
		Hurts minimalDependancies
      }
	}
  }

  > Single API presented to developers.
  >
  > Code that works with the product family will use the same code
  > regardless of which family is being interacted with.
  > The chock point.

  Property "Multiple Factory Clients" {

    > The same API is presented for all product families.
    Advantage "Familiarity" is Satisfied {
      Affects {
        Makes closedForModification,
		SomePos minimalDependancies
      }
    }

	> There is a choke point in product family creation that allows
    >  for a switch between different product families.
	Advantage "Known Choke Point" is Satisfied {
	  Affects {Helps flexibleReplacement}
    }
  }

  > The techniques used for decoupling product descriptions and
  > implementations require OO-specific functionality. The decoupling
  > is achieved using inheritance, abstract implementations, and
  > interfaces.
  Property "Not Language Agnostic" {

	Disadvantage "OO Specific Technologies" is Denied {
	  Affects {
	    Breaks languageAgnostic
	  }
    }
  }
}
