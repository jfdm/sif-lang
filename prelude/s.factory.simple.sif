sif solution

Description """Factory methods, programming against interfaces, and concrete implementations allow for a loose coupling of data representations against their representations."""

> Interfaces are constructs that describe the permited operations that
> a data structure should have. Instances provide implementations that
> adhere to these interfaces for particular data structure
> representations. When combined with Factory methods, that construct
> concrete instances, devlopers can build data structures that work
> against these interfaces and use factory methods to swap out
> implementations.

Solution "Simple Factory" solves adt in std {

  > Abstract Product Interfaces describes the operations that are
  > common to all products. This is a centralised definition that
  > programmers can develop against.
  >
  > This interface is a contract through which access to the data will
  > be controlled. Through provision of this interface access to the
  > data has been restricted to allowed oeprations only.  This has
  > advantages that the resulting code used to interact with data is
  > the same regardless of implementation. However, there is a down
  > side that not all programming languages support the ability to
  > programme against an interface.

  Property "Product Interface" {

    > Interface programming ensures that the representation and usage
    > for a data structure is kept separate, and helps provide a means
    > through which the creation of objects can be assured.

	Advantage "Is Abstract" is Satisfied {
	    Affects {
  	      Makes separateObjects,
		  Helps agnosticObjectGeneration
		}
    }

	> Provision of an interface provides a central definition that is
	> used to program against and ensures that the resulting code is
	> closed for modification.
    Advantage "Central Definition" is Satisfied {
        Affects { Helps closedForModification }
	}

    > Not all programming languages facilitates programming against interfaces.
	Disadvantage "Interface Programming" is WeakDen  {
        Affects { SomeNeg languageAgnostic }
	}
  }

  > Concrete implementations are data implementations that must adhere to the
  > abstract product interface.
  >
  > While descriptions detail what a data structure can do, concrete
  > implementations provide the means how.

  Property "Concrete Products" {

    > This is the 'how' through which operations are performed.
    Advantage "Is Real" is Satisfied {
	  Affects {
	      Makes separateObjects,
		  Helps agnosticObjectGeneration
		}
    }
  }

  > A mechanism to generate concrete classes through provision of factory
  > methods rather than constructors
  >
  > Product interfaces detail the 'what', while concrete products
  > detail the 'how'.  The 'Factory' methods provide the link between
  > constructing concrete representations of the data structures and
  > passing the 'real' implementation to the code that interacts with
  > the representation using the abstract product interface.

  Property "Factory" {

    > Factories provide the functionality through which concrete
    > instances are created and inserted into the code that relies
    > upon the abstract interfaces.

    Advantage "Separation" is Satisfied {
       Affects {
          Makes separateObjects,
		  Makes agnosticObjectGeneration,
		  Makes closedForModification
       }
    }

    > Factories offer a choke point and each data structure requires
	> a distinct factory.

	Disadvantage "Choke Point" is WeakDen {
       Affects {
         Hurts minimalDependancies,
		 Hurts flexibleReplacement
       }
    }
  }

  > The function in the code base that utilises the factory to create
  > objects.

  Property "Factory Client" {

    Advantage "Kept the Same" is Satisfied {
      Affects {
        Makes closedForModification,
		Makes minimalDependancies
      }
    }
  }

  > The techniques used for decoupling product descriptions and
  > implementations are not bespoke to a single language. This
  > decoupling can be achieved using inheritance, interfaces,
  > typeclasses, traits.

  Property "Possibly Language Agnostic" {

	Advantage "Lang Agnostic Techniques" is WeakSatis {
	  Affects {
	    SomePos languageAgnostic
	  }
    }
  }

}
