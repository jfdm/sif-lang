sif solution

Solution "Simple Factory" solves polymorph in std {

  > A mechanism to generate concrete classes based upon a predetermined decision procedure.
  Property "Factory" {

    Advantage "Separation" is Satisfied {
       Affects {
          Makes separateObjects,
		  Makes agnosticObjectGeneration,
		  Makes closedForModification
       }
    }
	Disadvantage "Choke Point" is WeakDen {
       Affects {
         Hurts minimalDependancies,
		 Hurts flexibleReplacement
       }
    }
  }

  > The function in the code base that utilises the factory to create objects.
  Property "Factory Client" {

    Advantage "Kept the Same" is Satisfied {
      Affects {
        Makes closedForModification,
		Makes minimalDependancies
      }
    }
  }

  > This represents the abstract representation of the data structure
  > to be created. It is with this representation that developers will
  > interact with the product.

  Property "Abstract Product Interface" {


	Advantage "Is Abstract" is Satisfied {
	    Affects {
  	      Makes separateObjects,
		  Helps agnosticObjectGeneration
		}
    }
  }

  > This provides concrete representations of the data structure to be
  > created.  This will be used to implement the abstract data
  > structure.

  Property "Concrete Products" {

    Advantage "Is Real" is Satisfied {
	  Affects {
	      Makes separateObjects,
		  Helps agnosticObjectGeneration
		}
    }
  }
}
