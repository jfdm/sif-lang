sif problem

> Given two entities Alice and Bob, how can Bob give a message to
> Alice such that only the intended recipient, Alice, can be guaranteed
> to access the message.

infosec <- Problem "Information Secrecy"

> Core principle that ensures that the data is kept confidential.
>
> This functional requirement represents the core principle behind
> data confidentiality, the data should be kept confidential. The
> attacker may obtain knowledge about the sender/recipient, means and
> times of transport but the information contained inside should not be
> accessible.

dataConf <- Functional "Data Confidentiality"

> The data should be viewable only by the intended recipient.
>
> A related functional requirement is that the recipient of the
> message should be the only entity capable of accessing the data
> contained within the message.

recipConf <- Functional "Recipient Confidentiality"

> Different levels of security should be permitted.
>
> This performance requirement represents the notion that not all data
> needs equivalent levels of protection.  Data only needs to be
> protected for the lifetime that the confidentiality needs to be
> guaranteed.

multiSecLevels <- Performance "Suitable Security Level"

> Protecting data should not take forever.
>
> This usability requirement represents the idea that the actual act
> of securing data should not hinder upon the usage of any proposed
> mechanism. A user of the solution must not be inconvenienced by its
> use.

mechPerf <- Performance "Suitable performance"

> Mechanism should be usable by non-experts.
>
> A secondary usability requirement targets the level of knowledge
> that an end-user of the solution must possess to use the solution.
> The user should need minimal knowledge of the underlying system.

understandable <- Usability "Comprehensible by Non-Experts"

> The mechanism should not impact on normal operations.
>
> The resulting solution should have minimal impact on the workflow of
> the user. A complex solution to use will be a solution less likely
> to be adopted or used properly.  Having a solution that has minimal
> workflow disruption is good.

minDisrupt <- Usability "Minimal Workflow Disruption"

> The implementation should be implemented securely.
>
> Code vulnerabilities can lead rise to security risk to ones data if
> said vulnerabilities can be manifested by a threat.  The mechanism
> should be implemented in a secure fashion such to minimise code
> vulnerabilities and other attack surfaces.
secureImpl <- Reliability "Secure Implementation"

--  -------------------------------------------------------------------- [ EOF ]
