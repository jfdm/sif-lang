<?xml version="1.0"?>
<pattern>
  <name>Abstract Data Types through OO Factories</name>
  <description>Defines an interface for creating data but lets the
  subclasses decide which class to instantiate. Factory method lets
  a class defer instantiation to subclasses.</description>
  <metadata>
    <aliases>
      <alias>TO BE DETERMIND</alias>
    </aliases>
    <tags>
      <tag>TO BE DETERMIND</tag>
    </tags>
    <created>TO BE DETERMIND</created>
    <modified>TO BE DETERMIND</modified>
    <evaluated>TO BE DETERMIND</evaluated>
    <authors>
      <author>TO BE DETERMIND</author>
    </authors>
    <auditors>
      <auditor>TO BE DETERMIND</auditor>
    </auditors>
  </metadata>
  <context score="TO BE DETERMINED">
    <name score="TO BE DETERMINED">Default</name>
    <description score="TO BE DETERMINED">Not
    Specified</description>
  </context>
  <problem score="TO BE DETERMINED">
    <name>Abstract Data Types</name>
    <description score="TO BE DETERMINED">How to work with data
    structures without knowledge of their
    concreterepresentation.&gt; When working with data structures,
    how can one present, create,serve, and work with data without
    exposing the data structure'sconcrete implementation. This
    development technique allows for aloose coupling to be made
    between data representation and use.</description>
    <requirements>
      <functional id="6" score="TO BE DETERMINED">
        <name score="TO BE DETERMINED">Language Agnostic</name>
        <description score="TO BE DETERMINED">The solution should
        limit the use of language specific features.&gt; The
        technical constructs used to achieve separation should not
        bebespoke to the language. Use of bespoke constructs limits
        theapplicability of the solution to programming
        environments that sharethe same language
        constructs.</description>
      </functional>
      <supportability id="5" score="TO BE DETERMINED">
        <name score="TO BE DETERMINED">Minimal Dependencies</name>
        <description score="TO BE DETERMINED">The resulting code
        should have minimal dependencies.&gt; The technical debt in
        using this solution should not be high.</description>
      </supportability>
      <functional id="4" score="TO BE DETERMINED">
        <name score="TO BE DETERMINED">Flexible Replacement</name>
        <description score="TO BE DETERMINED">There should be an
        ability to replace the method of creation easily.&gt; How
        each concrete data instance is created by
        differentrepresentations should be kept the same. Use of
        different methodsfor each different representation
        increases the effort required inswapping out conrete
        implementations.</description>
      </functional>
      <functional id="3" score="TO BE DETERMINED">
        <name score="TO BE DETERMINED">Closed for
        Modification</name>
        <description score="TO BE DETERMINED">The creation and use
        of data instances should be closed for modification.A
        change of data structure representation should not require
        codethat utilises the data structure to be changed.
        Operations common toall concrete representations should be
        the only API that theprogrammer uses.</description>
      </functional>
      <functional id="2" score="TO BE DETERMINED">
        <name score="TO BE DETERMINED">Agnostic Generation of
        Objects</name>
        <description score="TO BE DETERMINED">The solution must
        allow for the generation of data structureinstances without
        knowledge of the underlying implementation.&gt; Obsfucation
        of concrete object generation facilitates
        greaterImplementation code, and hides away
        implementationspecific constructs from
        developers.</description>
      </functional>
      <functional id="1" score="TO BE DETERMINED">
        <name score="TO BE DETERMINED">Separate Data
        Structures</name>
        <description score="TO BE DETERMINED">The solution must
        provide a means to separate representation
        andimplementation of data structures.&gt; This is a core
        requirement of the problem. This separation
        betweenrepresentation and implementation, allows for
        differentimplementations to be presented to
        developers.</description>
      </functional>
    </requirements>
  </problem>
  <solution score="TO BE DETERMINED">
    <name>OO Factories</name>
    <description>Extension of the Simple Factory Solution using OO
    Concepts to defer instantiationto the subclass.&gt; The Simple
    Factory solution detailed how a combination of
    InterfaceProgramming, abstract representation, and constructors
    is used toaddress the problem of abstract data types. The OO
    Factory solutionextends the simple factory solution using OO
    concepts. ObjectInheritance and Abstract Classes allow for
    partial implementation ofthe constructs common to all concrete
    constructors, and that theseconstructs are extended to provide
    representation specificconstructs.</description>
    <dynamics score="TO BE DETERMINED">
      <model modelTy="class | component | sequence | deployment">
        <![CData[
         "TO BE DETERMINED"
        ]]>
        <description>TO BE DETERMINED</description>
      </model>
      <description score="TO BE DETERMINED">TO BE
      DETERMINED</description>
    </dynamics>
    <structure score="TO BE DETERMINED">
      <model modelTy="class | component | sequence | deployment">
        <![CData[
         "TO BE DETERMINED"
        ]]>
        <description>TO BE DETERMINED</description>
      </model>
      <description score="TO BE DETERMINED">TO BE
      DETERMINED</description>
    </structure>
    <properties score="TO BE DETERMINED">
      <property score="TO BE DETERMINED">
        <name>Not Language Agnostic</name>
        <description>Use of OO techniques.&gt; The techniques used
        for decoupling product descriptions andimplementations
        require OO-specific functionality. The decouplingis
        achieved using inheritance, abstract implementations,
        andinterfaces.</description>
        <traits>
          <disadvantage svalue="WEAKDEN" score="TO BE DETERMINED">
            <name>OO Specific Technologies</name>
            <description>TO BE DETERMINED</description>
            <affects>
              <affect cvalue="SOMENEG" linksTo="6"></affect>
            </affects>
          </disadvantage>
        </traits>
      </property>
      <property score="TO BE DETERMINED">
        <name>Factory Client</name>
        <description>A point in the code base from which the
        concrete representation isgenerated and used through the
        abstract product interface. Thefunction in the code base
        that utilises the concrete factory tocreate
        objects.</description>
        <traits>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Kept the Same</name>
            <description>TO BE DETERMINED</description>
            <affects>
              <affect cvalue="MAKES" linksTo="5"></affect>
              <affect cvalue="MAKES" linksTo="3"></affect>
            </affects>
          </advantage>
        </traits>
      </property>
      <property score="TO BE DETERMINED">
        <name>Concrete Factories</name>
        <description>Implementation specific constructors that
        extend the abstractfactories with implemention specific
        functionality.&gt; Concrete Factories detail how concrete
        products are to beimplemented. Extension of the abstract
        factory allows concretefactories to be built in accordance
        with the abstract factoryinterface.</description>
        <traits>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Concrete Creators</name>
            <description>TO BE DETERMINED</description>
            <affects>
              <affect cvalue="SOMENEG" linksTo="6"></affect>
              <affect cvalue="HELPS" linksTo="4"></affect>
              <affect cvalue="HELPS" linksTo="1"></affect>
              <affect cvalue="HELPS" linksTo="2"></affect>
            </affects>
          </advantage>
        </traits>
      </property>
      <property score="TO BE DETERMINED">
        <name>Abstract Factories</name>
        <description>Utilisation of a generic construction
        mechanism that contains theimplementation/manipulate
        details common for all products.&gt; Product interfaces
        detail the 'what', while concrete productsdetail the 'how'.
        The 'Abstract Factory' object provides the linkbetween
        constructing concrete representations of the datastructures
        and passing the 'real' implementation to the codethrough
        provision of a common interace.</description>
        <traits>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Product Families</name>
            <description>TO BE DETERMINED</description>
            <affects>
              <affect cvalue="SOMENEG" linksTo="6"></affect>
              <affect cvalue="HELPS" linksTo="4"></affect>
              <affect cvalue="HELPS" linksTo="3"></affect>
              <affect cvalue="HELPS" linksTo="1"></affect>
              <affect cvalue="HELPS" linksTo="2"></affect>
            </affects>
          </advantage>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Generic Creators</name>
            <description>TO BE DETERMINED</description>
            <affects>
              <affect cvalue="SOMENEG" linksTo="6"></affect>
              <affect cvalue="HELPS" linksTo="4"></affect>
              <affect cvalue="HELPS" linksTo="3"></affect>
              <affect cvalue="HELPS" linksTo="1"></affect>
              <affect cvalue="HELPS" linksTo="2"></affect>
            </affects>
          </advantage>
        </traits>
      </property>
      <property score="TO BE DETERMINED">
        <name>Concrete Products</name>
        <description>Concrete implementations are data
        implementations that must adhere to theabstract product
        interface.&gt; While descriptions detail what a data
        structure can do, concreteimplementations provide the means
        how.</description>
        <traits>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Is Real</name>
            <description>This is the 'how' through which operations
            are performed.</description>
            <affects>
              <affect cvalue="HELPS" linksTo="2"></affect>
              <affect cvalue="MAKES" linksTo="1"></affect>
            </affects>
          </advantage>
        </traits>
      </property>
      <property score="TO BE DETERMINED">
        <name>Product Interface</name>
        <description>Product Interfaces describes the operations
        that arecommon to all products. This is a centralised
        definition thatprogrammers can develop against.&gt; This
        interface is a contract through which access to the data
        willbe controlled. Through provision of this interface
        access to thedata has been restricted to allowed oeprations
        only. This hasadvantages that the resulting code used to
        interact with data isthe same regardless of implementation.
        However, there is a downside that not all programming
        languages support the ability toprogramme against an
        interface.</description>
        <traits>
          <disadvantage svalue="WEAKDEN" score="TO BE DETERMINED">
            <name>Interface Programming</name>
            <description>Not all programming languages facilitates
            programming against interfaces.</description>
            <affects>
              <affect cvalue="SOMENEG" linksTo="6"></affect>
            </affects>
          </disadvantage>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Central Definition</name>
            <description>Provision of an interface provides a
            central definition that isused to program against and
            ensures that the resulting code isclosed for
            modification.</description>
            <affects>
              <affect cvalue="HELPS" linksTo="3"></affect>
            </affects>
          </advantage>
          <advantage svalue="SATISFIED" score="TO BE DETERMINED">
            <name>Is Abstract</name>
            <description>Interface programming ensures that the
            representation and usagefor a data structure is kept
            separate, and helps provide a meansthrough which the
            creation of objects can be assured.</description>
            <affects>
              <affect cvalue="HELPS" linksTo="2"></affect>
              <affect cvalue="MAKES" linksTo="1"></affect>
            </affects>
          </advantage>
        </traits>
      </property>
    </properties>
  </solution>
  <evidence score="TO BE DETERMINED">TO BE DETERMIND</evidence>
  <studies score="TO BE DETERMINED">
    <study score="TO BE DETERMINED">
      <before></before>
      <after></after>
    </study>
  </studies>
  <relations score="TO BE DETERMINED">
    <link patternID="TO BE DETERMINED"
    relationship="specialises | implements | uses | linkedTo">
    </link>
  </relations>
</pattern>
