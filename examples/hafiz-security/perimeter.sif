-- ------------------------------------------------------ [ Perimeter Patterns ]
language "Perimeter Patterns" as perimeter

from infodisclosurecore import rbac

patterns

policy := Abstract Pattern("Policy")
brokeredAuth := Pattern("Brokered Authentication")
sap := Pattern("Single Access Point")
singleThreadedFacade := Pattern("Single Threaded Facade")
pep := Pattern("Policy Enforcement Point")
authenticationEnforcer := Pattern("Authentication Enforcer")
authorisationEnforcer := Pattern("Authorisation Enforcer")
accountLockout := Pattern("Account Lockout")
interceptValidator := Pattern("Intercepting Validator")
contentDependentProcessing := Pattern("Content Dependent Processing")
errorDetectionCorrection := Pattern("Error Detection and Correction")
exceptionShield := Pattern("Exception Shielding")

relations

policy -> brokeredAuth : "External Authentication"
policy -> sap : "Decision Point"

brokeredAuth -> authenticationEnforcer : "Check Credential"

sap -> pep : "Enforce Policy"
sap -> singleThreadedFacade : "Simple Perimeter"

pep -> authenticationEnforcer : "Check Identity" 
pep -> authorisationEnforcer : "Control Access" 
pep -> interceptValidator : "Check Input" 

authenticationEnforcer -> accountLockout : "Prevent Brute Force Attacks"
authorisationEnforcer -> rbac : "Policy for A/C"

interceptValidator -> contentDependentProcessing : "Code and Data separation"
interceptValidator -> errorDetectionCorrection : "Integrity Check" 

contentDependentProcessing -> exceptionShield : "Protect with exception and hide exception metadata" 
errorDetectionCorrection -> exceptionShield : "Protect with exception and hide exception metadata"

-- Munawar Hafiz, Paul Adamczyk, and Ralph E. Johnson. 2012. Growing a
-- pattern language (for security). In Proceedings of the ACM
-- international symposium on New ideas, new paradigms, and
-- reflections on programming and software (Onward! '12). ACM, New
-- York, NY, USA, 139-158. DOI=10.1145/2384592.2384607
